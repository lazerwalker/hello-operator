// Generated by CoffeeScript 1.9.2
(function() {
  var WebSocketServer, WebsocketInterface, _,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  WebSocketServer = require('ws').server;

  WebsocketInterface = (function() {
    function WebsocketInterface(people, client) {
      var wss;
      this.people = people;
      this.client = client;
      wss = new WebSocketServer({
        port: 8080
      });
      wss.on('connection', function(ws) {
        this.client = ws;
        return ws.on('message', function(message) {
          var command, data, ref;
          ref = JSON.parse(message), command = ref.command, data = ref.data;
          return typeof this[command] === "function" ? this[command](data) : void 0;
        });
      });
    }

    WebsocketInterface.prototype.connectOperator = function(sender) {
      return this.client.connectOperator(sender);
    };

    WebsocketInterface.prototype.disconnectOperator = function(sender) {
      return this.client.disconnectOperator(sender);
    };

    WebsocketInterface.prototype.connect = function(a, b) {
      return this.client.connect(a, b);
    };

    WebsocketInterface.prototype.disconnect = function(a, b) {
      return this.client.disconnect(a, b);
    };

    WebsocketInterface.prototype.sendMessage = function(command, data) {
      var ref;
      return (ref = this.client) != null ? ref.send(JSON.stringify({
        command: command,
        data: data
      })) : void 0;
    };

    WebsocketInterface.prototype.initiateCall = function(sender) {
      return this.sendMessage("initiateCall", sender);
    };

    WebsocketInterface.prototype.askToConnect = function(call) {
      return this.sendMessage("askToConnect", call);
    };

    WebsocketInterface.prototype.completeCall = function(call) {
      return this.sendMessage("completeCall", call);
    };

    WebsocketInterface.prototype.waitForInput = function() {
      process.stdin.resume();
      process.stdin.setEncoding('utf8');
      return process.stdin.on('data', (function(_this) {
        return function(text) {
          var c, first, i, len, match, other, ref, ref1, second;
          match = text.match(/(\w+) (\w+)/);
          ref = [match[1], match[2]], first = ref[0], second = ref[1];
          if (first === "me" || second === "me") {
            other = first === "me" ? second : first;
            if (indexOf.call(_this.connected, other) >= 0) {
              console.log("Disconnected " + other + " and operator");
              return _this.client.disconnectOperator(other);
            } else {
              _this.disconnectExisting(other);
              console.log("Connected " + other + " to operator");
              _this.connected.push([other, "me"]);
              return _this.client.connectOperator(other);
            }
          } else if (indexOf.call(_this.people, first) >= 0 && indexOf.call(_this.people, second) >= 0) {
            if (_.find(_this.connected, function(pair) {
              return indexOf.call(pair, first) >= 0 && indexOf.call(pair, second) >= 0;
            })) {
              console.log("Disconnected " + first + " and " + second + ".");
              return _this.client.disconnect(first, second);
            } else {
              ref1 = [first, second];
              for (i = 0, len = ref1.length; i < len; i++) {
                c = ref1[i];
                _this.disconnectExisting(c);
              }
              console.log("Connected " + first + " and " + second + ".");
              _this.connected.push([first, second]);
              return _this.client.connect(first, second);
            }
          }
        };
      })(this));
    };

    return WebsocketInterface;

  })();

  module.exports = WebsocketInterface;

}).call(this);

//# sourceMappingURL=websocket_interface.js.map
